// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.notification.proto

#include "chat.notification.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_chat_2enotification_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2enotification_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Notification;
}  // namespace protobuf_chat_2enotification_2eproto
namespace protobuf_chat_2euser_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2euser_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_User;
}  // namespace protobuf_chat_2euser_2eproto
namespace ChatPb {
class NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Notification>
      _instance;
} _Notification_default_instance_;
class NotificationTransferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotificationTransfer>
      _instance;
} _NotificationTransfer_default_instance_;
class NotificationAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotificationAck>
      _instance;
} _NotificationAck_default_instance_;
class NotificationApplyFriendDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NotificationApplyFriend>
      _instance;
} _NotificationApplyFriend_default_instance_;
}  // namespace ChatPb
namespace protobuf_chat_2enotification_2eproto {
static void InitDefaultsNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatPb::_Notification_default_instance_;
    new (ptr) ::ChatPb::Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatPb::Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotification}, {}};

static void InitDefaultsNotificationTransfer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatPb::_NotificationTransfer_default_instance_;
    new (ptr) ::ChatPb::NotificationTransfer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatPb::NotificationTransfer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NotificationTransfer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNotificationTransfer}, {
      &protobuf_chat_2enotification_2eproto::scc_info_Notification.base,}};

static void InitDefaultsNotificationAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatPb::_NotificationAck_default_instance_;
    new (ptr) ::ChatPb::NotificationAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatPb::NotificationAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NotificationAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNotificationAck}, {}};

static void InitDefaultsNotificationApplyFriend() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatPb::_NotificationApplyFriend_default_instance_;
    new (ptr) ::ChatPb::NotificationApplyFriend();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatPb::NotificationApplyFriend::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NotificationApplyFriend =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNotificationApplyFriend}, {
      &protobuf_chat_2euser_2eproto::scc_info_User.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotificationTransfer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotificationAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NotificationApplyFriend.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatPb::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatPb::Notification, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatPb::Notification, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatPb::Notification, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatPb::NotificationTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatPb::NotificationTransfer, notifications_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatPb::NotificationAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatPb::NotificationAck, msgid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatPb::NotificationApplyFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatPb::NotificationApplyFriend, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ChatPb::NotificationApplyFriend, message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChatPb::Notification)},
  { 8, -1, sizeof(::ChatPb::NotificationTransfer)},
  { 14, -1, sizeof(::ChatPb::NotificationAck)},
  { 20, -1, sizeof(::ChatPb::NotificationApplyFriend)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ChatPb::_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ChatPb::_NotificationTransfer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ChatPb::_NotificationAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ChatPb::_NotificationApplyFriend_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "chat.notification.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027chat.notification.proto\022\006ChatPb\032\017chat."
      "user.proto\"S\n\014Notification\022&\n\004type\030\001 \001(\016"
      "2\030.ChatPb.NotificationType\022\r\n\005msgid\030\002 \001("
      "\t\022\014\n\004data\030\003 \001(\014\"C\n\024NotificationTransfer\022"
      "+\n\rnotifications\030\001 \003(\0132\024.ChatPb.Notifica"
      "tion\" \n\017NotificationAck\022\r\n\005msgid\030\001 \001(\t\"F"
      "\n\027NotificationApplyFriend\022\032\n\004user\030\001 \001(\0132"
      "\014.ChatPb.User\022\017\n\007message\030\002 \001(\t*$\n\020Notifi"
      "cationType\022\020\n\014APPLY_FRIEND\020\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 356);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.notification.proto", &protobuf_RegisterTypes);
  ::protobuf_chat_2euser_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chat_2enotification_2eproto
namespace ChatPb {
const ::google::protobuf::EnumDescriptor* NotificationType_descriptor() {
  protobuf_chat_2enotification_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_2enotification_2eproto::file_level_enum_descriptors[0];
}
bool NotificationType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Notification::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Notification::kTypeFieldNumber;
const int Notification::kMsgidFieldNumber;
const int Notification::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Notification::Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_2enotification_2eproto::scc_info_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatPb.Notification)
}
Notification::Notification(const Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msgid().size() > 0) {
    msgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgid_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ChatPb.Notification)
}

void Notification::SharedCtor() {
  msgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:ChatPb.Notification)
  SharedDtor();
}

void Notification::SharedDtor() {
  msgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Notification::descriptor() {
  ::protobuf_chat_2enotification_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2enotification_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Notification& Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_2enotification_2eproto::scc_info_Notification.base);
  return *internal_default_instance();
}


void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatPb.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChatPb.Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ChatPb.NotificationType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ChatPb::NotificationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msgid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msgid().data(), static_cast<int>(this->msgid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChatPb.Notification.msgid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatPb.Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatPb.Notification)
  return false;
#undef DO_
}

void Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatPb.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatPb.NotificationType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string msgid = 2;
  if (this->msgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msgid().data(), static_cast<int>(this->msgid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChatPb.Notification.msgid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msgid(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ChatPb.Notification)
}

::google::protobuf::uint8* Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChatPb.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatPb.NotificationType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string msgid = 2;
  if (this->msgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msgid().data(), static_cast<int>(this->msgid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChatPb.Notification.msgid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgid(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatPb.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatPb.Notification)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msgid = 2;
  if (this->msgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgid());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .ChatPb.NotificationType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatPb.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatPb.Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatPb.Notification)
    MergeFrom(*source);
  }
}

void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatPb.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgid().size() > 0) {

    msgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgid_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatPb.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatPb.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::Swap(Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Notification::InternalSwap(Notification* other) {
  using std::swap;
  msgid_.Swap(&other->msgid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Notification::GetMetadata() const {
  protobuf_chat_2enotification_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2enotification_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotificationTransfer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotificationTransfer::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotificationTransfer::NotificationTransfer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_2enotification_2eproto::scc_info_NotificationTransfer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatPb.NotificationTransfer)
}
NotificationTransfer::NotificationTransfer(const NotificationTransfer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChatPb.NotificationTransfer)
}

void NotificationTransfer::SharedCtor() {
}

NotificationTransfer::~NotificationTransfer() {
  // @@protoc_insertion_point(destructor:ChatPb.NotificationTransfer)
  SharedDtor();
}

void NotificationTransfer::SharedDtor() {
}

void NotificationTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotificationTransfer::descriptor() {
  ::protobuf_chat_2enotification_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2enotification_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotificationTransfer& NotificationTransfer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_2enotification_2eproto::scc_info_NotificationTransfer.base);
  return *internal_default_instance();
}


void NotificationTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatPb.NotificationTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  _internal_metadata_.Clear();
}

bool NotificationTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChatPb.NotificationTransfer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ChatPb.Notification notifications = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatPb.NotificationTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatPb.NotificationTransfer)
  return false;
#undef DO_
}

void NotificationTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatPb.NotificationTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChatPb.Notification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ChatPb.NotificationTransfer)
}

::google::protobuf::uint8* NotificationTransfer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChatPb.NotificationTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChatPb.Notification notifications = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->notifications(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatPb.NotificationTransfer)
  return target;
}

size_t NotificationTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatPb.NotificationTransfer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ChatPb.Notification notifications = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationTransfer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatPb.NotificationTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationTransfer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotificationTransfer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatPb.NotificationTransfer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatPb.NotificationTransfer)
    MergeFrom(*source);
  }
}

void NotificationTransfer::MergeFrom(const NotificationTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatPb.NotificationTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
}

void NotificationTransfer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatPb.NotificationTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationTransfer::CopyFrom(const NotificationTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatPb.NotificationTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationTransfer::IsInitialized() const {
  return true;
}

void NotificationTransfer::Swap(NotificationTransfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotificationTransfer::InternalSwap(NotificationTransfer* other) {
  using std::swap;
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotificationTransfer::GetMetadata() const {
  protobuf_chat_2enotification_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2enotification_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotificationAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotificationAck::kMsgidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotificationAck::NotificationAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_2enotification_2eproto::scc_info_NotificationAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatPb.NotificationAck)
}
NotificationAck::NotificationAck(const NotificationAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msgid().size() > 0) {
    msgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgid_);
  }
  // @@protoc_insertion_point(copy_constructor:ChatPb.NotificationAck)
}

void NotificationAck::SharedCtor() {
  msgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NotificationAck::~NotificationAck() {
  // @@protoc_insertion_point(destructor:ChatPb.NotificationAck)
  SharedDtor();
}

void NotificationAck::SharedDtor() {
  msgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NotificationAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotificationAck::descriptor() {
  ::protobuf_chat_2enotification_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2enotification_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotificationAck& NotificationAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_2enotification_2eproto::scc_info_NotificationAck.base);
  return *internal_default_instance();
}


void NotificationAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatPb.NotificationAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NotificationAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChatPb.NotificationAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msgid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msgid().data(), static_cast<int>(this->msgid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChatPb.NotificationAck.msgid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatPb.NotificationAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatPb.NotificationAck)
  return false;
#undef DO_
}

void NotificationAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatPb.NotificationAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msgid = 1;
  if (this->msgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msgid().data(), static_cast<int>(this->msgid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChatPb.NotificationAck.msgid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msgid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ChatPb.NotificationAck)
}

::google::protobuf::uint8* NotificationAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChatPb.NotificationAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msgid = 1;
  if (this->msgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msgid().data(), static_cast<int>(this->msgid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChatPb.NotificationAck.msgid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatPb.NotificationAck)
  return target;
}

size_t NotificationAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatPb.NotificationAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msgid = 1;
  if (this->msgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatPb.NotificationAck)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotificationAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatPb.NotificationAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatPb.NotificationAck)
    MergeFrom(*source);
  }
}

void NotificationAck::MergeFrom(const NotificationAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatPb.NotificationAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgid().size() > 0) {

    msgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgid_);
  }
}

void NotificationAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatPb.NotificationAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationAck::CopyFrom(const NotificationAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatPb.NotificationAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationAck::IsInitialized() const {
  return true;
}

void NotificationAck::Swap(NotificationAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotificationAck::InternalSwap(NotificationAck* other) {
  using std::swap;
  msgid_.Swap(&other->msgid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotificationAck::GetMetadata() const {
  protobuf_chat_2enotification_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2enotification_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NotificationApplyFriend::InitAsDefaultInstance() {
  ::ChatPb::_NotificationApplyFriend_default_instance_._instance.get_mutable()->user_ = const_cast< ::ChatPb::User*>(
      ::ChatPb::User::internal_default_instance());
}
void NotificationApplyFriend::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotificationApplyFriend::kUserFieldNumber;
const int NotificationApplyFriend::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotificationApplyFriend::NotificationApplyFriend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_2enotification_2eproto::scc_info_NotificationApplyFriend.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatPb.NotificationApplyFriend)
}
NotificationApplyFriend::NotificationApplyFriend(const NotificationApplyFriend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_user()) {
    user_ = new ::ChatPb::User(*from.user_);
  } else {
    user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ChatPb.NotificationApplyFriend)
}

void NotificationApplyFriend::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = NULL;
}

NotificationApplyFriend::~NotificationApplyFriend() {
  // @@protoc_insertion_point(destructor:ChatPb.NotificationApplyFriend)
  SharedDtor();
}

void NotificationApplyFriend::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void NotificationApplyFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NotificationApplyFriend::descriptor() {
  ::protobuf_chat_2enotification_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2enotification_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NotificationApplyFriend& NotificationApplyFriend::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_2enotification_2eproto::scc_info_NotificationApplyFriend.base);
  return *internal_default_instance();
}


void NotificationApplyFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatPb.NotificationApplyFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  _internal_metadata_.Clear();
}

bool NotificationApplyFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChatPb.NotificationApplyFriend)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ChatPb.User user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChatPb.NotificationApplyFriend.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatPb.NotificationApplyFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatPb.NotificationApplyFriend)
  return false;
#undef DO_
}

void NotificationApplyFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatPb.NotificationApplyFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatPb.User user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChatPb.NotificationApplyFriend.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ChatPb.NotificationApplyFriend)
}

::google::protobuf::uint8* NotificationApplyFriend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChatPb.NotificationApplyFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatPb.User user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChatPb.NotificationApplyFriend.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatPb.NotificationApplyFriend)
  return target;
}

size_t NotificationApplyFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatPb.NotificationApplyFriend)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .ChatPb.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationApplyFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatPb.NotificationApplyFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationApplyFriend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotificationApplyFriend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatPb.NotificationApplyFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatPb.NotificationApplyFriend)
    MergeFrom(*source);
  }
}

void NotificationApplyFriend::MergeFrom(const NotificationApplyFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatPb.NotificationApplyFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_user()) {
    mutable_user()->::ChatPb::User::MergeFrom(from.user());
  }
}

void NotificationApplyFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatPb.NotificationApplyFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationApplyFriend::CopyFrom(const NotificationApplyFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatPb.NotificationApplyFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationApplyFriend::IsInitialized() const {
  return true;
}

void NotificationApplyFriend::Swap(NotificationApplyFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotificationApplyFriend::InternalSwap(NotificationApplyFriend* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NotificationApplyFriend::GetMetadata() const {
  protobuf_chat_2enotification_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2enotification_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ChatPb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ChatPb::Notification* Arena::CreateMaybeMessage< ::ChatPb::Notification >(Arena* arena) {
  return Arena::CreateInternal< ::ChatPb::Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ChatPb::NotificationTransfer* Arena::CreateMaybeMessage< ::ChatPb::NotificationTransfer >(Arena* arena) {
  return Arena::CreateInternal< ::ChatPb::NotificationTransfer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ChatPb::NotificationAck* Arena::CreateMaybeMessage< ::ChatPb::NotificationAck >(Arena* arena) {
  return Arena::CreateInternal< ::ChatPb::NotificationAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ChatPb::NotificationApplyFriend* Arena::CreateMaybeMessage< ::ChatPb::NotificationApplyFriend >(Arena* arena) {
  return Arena::CreateInternal< ::ChatPb::NotificationApplyFriend >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
