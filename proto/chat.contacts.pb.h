// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.contacts.proto

#ifndef PROTOBUF_INCLUDED_chat_2econtacts_2eproto
#define PROTOBUF_INCLUDED_chat_2econtacts_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "chat.user.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2econtacts_2eproto 

namespace protobuf_chat_2econtacts_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chat_2econtacts_2eproto
namespace ChatPb {
class AgreeFriendREQ;
class AgreeFriendREQDefaultTypeInternal;
extern AgreeFriendREQDefaultTypeInternal _AgreeFriendREQ_default_instance_;
class AgreeFriendRES;
class AgreeFriendRESDefaultTypeInternal;
extern AgreeFriendRESDefaultTypeInternal _AgreeFriendRES_default_instance_;
class ApplyFriendREQ;
class ApplyFriendREQDefaultTypeInternal;
extern ApplyFriendREQDefaultTypeInternal _ApplyFriendREQ_default_instance_;
class ApplyFriendRES;
class ApplyFriendRESDefaultTypeInternal;
extern ApplyFriendRESDefaultTypeInternal _ApplyFriendRES_default_instance_;
class ContactREQ;
class ContactREQDefaultTypeInternal;
extern ContactREQDefaultTypeInternal _ContactREQ_default_instance_;
class ContactRES;
class ContactRESDefaultTypeInternal;
extern ContactRESDefaultTypeInternal _ContactRES_default_instance_;
class DeleteFriendREQ;
class DeleteFriendREQDefaultTypeInternal;
extern DeleteFriendREQDefaultTypeInternal _DeleteFriendREQ_default_instance_;
class DeleteFriendRES;
class DeleteFriendRESDefaultTypeInternal;
extern DeleteFriendRESDefaultTypeInternal _DeleteFriendRES_default_instance_;
class SearchUserREQ;
class SearchUserREQDefaultTypeInternal;
extern SearchUserREQDefaultTypeInternal _SearchUserREQ_default_instance_;
class SearchUserRES;
class SearchUserRESDefaultTypeInternal;
extern SearchUserRESDefaultTypeInternal _SearchUserRES_default_instance_;
}  // namespace ChatPb
namespace google {
namespace protobuf {
template<> ::ChatPb::AgreeFriendREQ* Arena::CreateMaybeMessage<::ChatPb::AgreeFriendREQ>(Arena*);
template<> ::ChatPb::AgreeFriendRES* Arena::CreateMaybeMessage<::ChatPb::AgreeFriendRES>(Arena*);
template<> ::ChatPb::ApplyFriendREQ* Arena::CreateMaybeMessage<::ChatPb::ApplyFriendREQ>(Arena*);
template<> ::ChatPb::ApplyFriendRES* Arena::CreateMaybeMessage<::ChatPb::ApplyFriendRES>(Arena*);
template<> ::ChatPb::ContactREQ* Arena::CreateMaybeMessage<::ChatPb::ContactREQ>(Arena*);
template<> ::ChatPb::ContactRES* Arena::CreateMaybeMessage<::ChatPb::ContactRES>(Arena*);
template<> ::ChatPb::DeleteFriendREQ* Arena::CreateMaybeMessage<::ChatPb::DeleteFriendREQ>(Arena*);
template<> ::ChatPb::DeleteFriendRES* Arena::CreateMaybeMessage<::ChatPb::DeleteFriendRES>(Arena*);
template<> ::ChatPb::SearchUserREQ* Arena::CreateMaybeMessage<::ChatPb::SearchUserREQ>(Arena*);
template<> ::ChatPb::SearchUserRES* Arena::CreateMaybeMessage<::ChatPb::SearchUserRES>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ChatPb {

// ===================================================================

class ContactREQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.ContactREQ) */ {
 public:
  ContactREQ();
  virtual ~ContactREQ();

  ContactREQ(const ContactREQ& from);

  inline ContactREQ& operator=(const ContactREQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContactREQ(ContactREQ&& from) noexcept
    : ContactREQ() {
    *this = ::std::move(from);
  }

  inline ContactREQ& operator=(ContactREQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactREQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactREQ* internal_default_instance() {
    return reinterpret_cast<const ContactREQ*>(
               &_ContactREQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ContactREQ* other);
  friend void swap(ContactREQ& a, ContactREQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContactREQ* New() const final {
    return CreateMaybeMessage<ContactREQ>(NULL);
  }

  ContactREQ* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContactREQ>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContactREQ& from);
  void MergeFrom(const ContactREQ& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactREQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ChatPb.ContactREQ)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2econtacts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContactRES : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.ContactRES) */ {
 public:
  ContactRES();
  virtual ~ContactRES();

  ContactRES(const ContactRES& from);

  inline ContactRES& operator=(const ContactRES& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContactRES(ContactRES&& from) noexcept
    : ContactRES() {
    *this = ::std::move(from);
  }

  inline ContactRES& operator=(ContactRES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactRES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactRES* internal_default_instance() {
    return reinterpret_cast<const ContactRES*>(
               &_ContactRES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ContactRES* other);
  friend void swap(ContactRES& a, ContactRES& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContactRES* New() const final {
    return CreateMaybeMessage<ContactRES>(NULL);
  }

  ContactRES* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContactRES>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContactRES& from);
  void MergeFrom(const ContactRES& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactRES* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ChatPb.User users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  ::ChatPb::User* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::ChatPb::User >*
      mutable_users();
  const ::ChatPb::User& users(int index) const;
  ::ChatPb::User* add_users();
  const ::google::protobuf::RepeatedPtrField< ::ChatPb::User >&
      users() const;

  // repeated string deleteUserIds = 2;
  int deleteuserids_size() const;
  void clear_deleteuserids();
  static const int kDeleteUserIdsFieldNumber = 2;
  const ::std::string& deleteuserids(int index) const;
  ::std::string* mutable_deleteuserids(int index);
  void set_deleteuserids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_deleteuserids(int index, ::std::string&& value);
  #endif
  void set_deleteuserids(int index, const char* value);
  void set_deleteuserids(int index, const char* value, size_t size);
  ::std::string* add_deleteuserids();
  void add_deleteuserids(const ::std::string& value);
  #if LANG_CXX11
  void add_deleteuserids(::std::string&& value);
  #endif
  void add_deleteuserids(const char* value);
  void add_deleteuserids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& deleteuserids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_deleteuserids();

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ChatPb.ContactRES)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ChatPb::User > users_;
  ::google::protobuf::RepeatedPtrField< ::std::string> deleteuserids_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2econtacts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchUserREQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.SearchUserREQ) */ {
 public:
  SearchUserREQ();
  virtual ~SearchUserREQ();

  SearchUserREQ(const SearchUserREQ& from);

  inline SearchUserREQ& operator=(const SearchUserREQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchUserREQ(SearchUserREQ&& from) noexcept
    : SearchUserREQ() {
    *this = ::std::move(from);
  }

  inline SearchUserREQ& operator=(SearchUserREQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchUserREQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchUserREQ* internal_default_instance() {
    return reinterpret_cast<const SearchUserREQ*>(
               &_SearchUserREQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SearchUserREQ* other);
  friend void swap(SearchUserREQ& a, SearchUserREQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchUserREQ* New() const final {
    return CreateMaybeMessage<SearchUserREQ>(NULL);
  }

  SearchUserREQ* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchUserREQ>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchUserREQ& from);
  void MergeFrom(const SearchUserREQ& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchUserREQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:ChatPb.SearchUserREQ)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2econtacts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchUserRES : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.SearchUserRES) */ {
 public:
  SearchUserRES();
  virtual ~SearchUserRES();

  SearchUserRES(const SearchUserRES& from);

  inline SearchUserRES& operator=(const SearchUserRES& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchUserRES(SearchUserRES&& from) noexcept
    : SearchUserRES() {
    *this = ::std::move(from);
  }

  inline SearchUserRES& operator=(SearchUserRES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchUserRES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchUserRES* internal_default_instance() {
    return reinterpret_cast<const SearchUserRES*>(
               &_SearchUserRES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SearchUserRES* other);
  friend void swap(SearchUserRES& a, SearchUserRES& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchUserRES* New() const final {
    return CreateMaybeMessage<SearchUserRES>(NULL);
  }

  SearchUserRES* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchUserRES>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchUserRES& from);
  void MergeFrom(const SearchUserRES& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchUserRES* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ChatPb.User users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  ::ChatPb::User* mutable_users(int index);
  ::google::protobuf::RepeatedPtrField< ::ChatPb::User >*
      mutable_users();
  const ::ChatPb::User& users(int index) const;
  ::ChatPb::User* add_users();
  const ::google::protobuf::RepeatedPtrField< ::ChatPb::User >&
      users() const;

  // @@protoc_insertion_point(class_scope:ChatPb.SearchUserRES)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ChatPb::User > users_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2econtacts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ApplyFriendREQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.ApplyFriendREQ) */ {
 public:
  ApplyFriendREQ();
  virtual ~ApplyFriendREQ();

  ApplyFriendREQ(const ApplyFriendREQ& from);

  inline ApplyFriendREQ& operator=(const ApplyFriendREQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApplyFriendREQ(ApplyFriendREQ&& from) noexcept
    : ApplyFriendREQ() {
    *this = ::std::move(from);
  }

  inline ApplyFriendREQ& operator=(ApplyFriendREQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyFriendREQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyFriendREQ* internal_default_instance() {
    return reinterpret_cast<const ApplyFriendREQ*>(
               &_ApplyFriendREQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ApplyFriendREQ* other);
  friend void swap(ApplyFriendREQ& a, ApplyFriendREQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApplyFriendREQ* New() const final {
    return CreateMaybeMessage<ApplyFriendREQ>(NULL);
  }

  ApplyFriendREQ* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ApplyFriendREQ>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ApplyFriendREQ& from);
  void MergeFrom(const ApplyFriendREQ& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyFriendREQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:ChatPb.ApplyFriendREQ)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2econtacts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ApplyFriendRES : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.ApplyFriendRES) */ {
 public:
  ApplyFriendRES();
  virtual ~ApplyFriendRES();

  ApplyFriendRES(const ApplyFriendRES& from);

  inline ApplyFriendRES& operator=(const ApplyFriendRES& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApplyFriendRES(ApplyFriendRES&& from) noexcept
    : ApplyFriendRES() {
    *this = ::std::move(from);
  }

  inline ApplyFriendRES& operator=(ApplyFriendRES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyFriendRES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyFriendRES* internal_default_instance() {
    return reinterpret_cast<const ApplyFriendRES*>(
               &_ApplyFriendRES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ApplyFriendRES* other);
  friend void swap(ApplyFriendRES& a, ApplyFriendRES& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApplyFriendRES* New() const final {
    return CreateMaybeMessage<ApplyFriendRES>(NULL);
  }

  ApplyFriendRES* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ApplyFriendRES>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ApplyFriendRES& from);
  void MergeFrom(const ApplyFriendRES& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyFriendRES* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // bool succeeded = 2;
  void clear_succeeded();
  static const int kSucceededFieldNumber = 2;
  bool succeeded() const;
  void set_succeeded(bool value);

  // @@protoc_insertion_point(class_scope:ChatPb.ApplyFriendRES)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  bool succeeded_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2econtacts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AgreeFriendREQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.AgreeFriendREQ) */ {
 public:
  AgreeFriendREQ();
  virtual ~AgreeFriendREQ();

  AgreeFriendREQ(const AgreeFriendREQ& from);

  inline AgreeFriendREQ& operator=(const AgreeFriendREQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AgreeFriendREQ(AgreeFriendREQ&& from) noexcept
    : AgreeFriendREQ() {
    *this = ::std::move(from);
  }

  inline AgreeFriendREQ& operator=(AgreeFriendREQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AgreeFriendREQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgreeFriendREQ* internal_default_instance() {
    return reinterpret_cast<const AgreeFriendREQ*>(
               &_AgreeFriendREQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AgreeFriendREQ* other);
  friend void swap(AgreeFriendREQ& a, AgreeFriendREQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AgreeFriendREQ* New() const final {
    return CreateMaybeMessage<AgreeFriendREQ>(NULL);
  }

  AgreeFriendREQ* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AgreeFriendREQ>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AgreeFriendREQ& from);
  void MergeFrom(const AgreeFriendREQ& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgreeFriendREQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:ChatPb.AgreeFriendREQ)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2econtacts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AgreeFriendRES : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.AgreeFriendRES) */ {
 public:
  AgreeFriendRES();
  virtual ~AgreeFriendRES();

  AgreeFriendRES(const AgreeFriendRES& from);

  inline AgreeFriendRES& operator=(const AgreeFriendRES& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AgreeFriendRES(AgreeFriendRES&& from) noexcept
    : AgreeFriendRES() {
    *this = ::std::move(from);
  }

  inline AgreeFriendRES& operator=(AgreeFriendRES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AgreeFriendRES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgreeFriendRES* internal_default_instance() {
    return reinterpret_cast<const AgreeFriendRES*>(
               &_AgreeFriendRES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AgreeFriendRES* other);
  friend void swap(AgreeFriendRES& a, AgreeFriendRES& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AgreeFriendRES* New() const final {
    return CreateMaybeMessage<AgreeFriendRES>(NULL);
  }

  AgreeFriendRES* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AgreeFriendRES>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AgreeFriendRES& from);
  void MergeFrom(const AgreeFriendRES& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgreeFriendRES* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string chatId = 1;
  void clear_chatid();
  static const int kChatIdFieldNumber = 1;
  const ::std::string& chatid() const;
  void set_chatid(const ::std::string& value);
  #if LANG_CXX11
  void set_chatid(::std::string&& value);
  #endif
  void set_chatid(const char* value);
  void set_chatid(const char* value, size_t size);
  ::std::string* mutable_chatid();
  ::std::string* release_chatid();
  void set_allocated_chatid(::std::string* chatid);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:ChatPb.AgreeFriendRES)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr chatid_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2econtacts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteFriendREQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.DeleteFriendREQ) */ {
 public:
  DeleteFriendREQ();
  virtual ~DeleteFriendREQ();

  DeleteFriendREQ(const DeleteFriendREQ& from);

  inline DeleteFriendREQ& operator=(const DeleteFriendREQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteFriendREQ(DeleteFriendREQ&& from) noexcept
    : DeleteFriendREQ() {
    *this = ::std::move(from);
  }

  inline DeleteFriendREQ& operator=(DeleteFriendREQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteFriendREQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteFriendREQ* internal_default_instance() {
    return reinterpret_cast<const DeleteFriendREQ*>(
               &_DeleteFriendREQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeleteFriendREQ* other);
  friend void swap(DeleteFriendREQ& a, DeleteFriendREQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteFriendREQ* New() const final {
    return CreateMaybeMessage<DeleteFriendREQ>(NULL);
  }

  DeleteFriendREQ* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFriendREQ>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteFriendREQ& from);
  void MergeFrom(const DeleteFriendREQ& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFriendREQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:ChatPb.DeleteFriendREQ)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2econtacts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteFriendRES : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.DeleteFriendRES) */ {
 public:
  DeleteFriendRES();
  virtual ~DeleteFriendRES();

  DeleteFriendRES(const DeleteFriendRES& from);

  inline DeleteFriendRES& operator=(const DeleteFriendRES& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteFriendRES(DeleteFriendRES&& from) noexcept
    : DeleteFriendRES() {
    *this = ::std::move(from);
  }

  inline DeleteFriendRES& operator=(DeleteFriendRES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteFriendRES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteFriendRES* internal_default_instance() {
    return reinterpret_cast<const DeleteFriendRES*>(
               &_DeleteFriendRES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DeleteFriendRES* other);
  friend void swap(DeleteFriendRES& a, DeleteFriendRES& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteFriendRES* New() const final {
    return CreateMaybeMessage<DeleteFriendRES>(NULL);
  }

  DeleteFriendRES* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteFriendRES>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteFriendRES& from);
  void MergeFrom(const DeleteFriendRES& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFriendRES* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool succeeded = 2;
  void clear_succeeded();
  static const int kSucceededFieldNumber = 2;
  bool succeeded() const;
  void set_succeeded(bool value);

  // @@protoc_insertion_point(class_scope:ChatPb.DeleteFriendRES)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool succeeded_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2econtacts_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContactREQ

// int64 timestamp = 1;
inline void ContactREQ::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ContactREQ::timestamp() const {
  // @@protoc_insertion_point(field_get:ChatPb.ContactREQ.timestamp)
  return timestamp_;
}
inline void ContactREQ::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ChatPb.ContactREQ.timestamp)
}

// -------------------------------------------------------------------

// ContactRES

// repeated .ChatPb.User users = 1;
inline int ContactRES::users_size() const {
  return users_.size();
}
inline ::ChatPb::User* ContactRES::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:ChatPb.ContactRES.users)
  return users_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ChatPb::User >*
ContactRES::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:ChatPb.ContactRES.users)
  return &users_;
}
inline const ::ChatPb::User& ContactRES::users(int index) const {
  // @@protoc_insertion_point(field_get:ChatPb.ContactRES.users)
  return users_.Get(index);
}
inline ::ChatPb::User* ContactRES::add_users() {
  // @@protoc_insertion_point(field_add:ChatPb.ContactRES.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ChatPb::User >&
ContactRES::users() const {
  // @@protoc_insertion_point(field_list:ChatPb.ContactRES.users)
  return users_;
}

// repeated string deleteUserIds = 2;
inline int ContactRES::deleteuserids_size() const {
  return deleteuserids_.size();
}
inline void ContactRES::clear_deleteuserids() {
  deleteuserids_.Clear();
}
inline const ::std::string& ContactRES::deleteuserids(int index) const {
  // @@protoc_insertion_point(field_get:ChatPb.ContactRES.deleteUserIds)
  return deleteuserids_.Get(index);
}
inline ::std::string* ContactRES::mutable_deleteuserids(int index) {
  // @@protoc_insertion_point(field_mutable:ChatPb.ContactRES.deleteUserIds)
  return deleteuserids_.Mutable(index);
}
inline void ContactRES::set_deleteuserids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ChatPb.ContactRES.deleteUserIds)
  deleteuserids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ContactRES::set_deleteuserids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ChatPb.ContactRES.deleteUserIds)
  deleteuserids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ContactRES::set_deleteuserids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  deleteuserids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ChatPb.ContactRES.deleteUserIds)
}
inline void ContactRES::set_deleteuserids(int index, const char* value, size_t size) {
  deleteuserids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChatPb.ContactRES.deleteUserIds)
}
inline ::std::string* ContactRES::add_deleteuserids() {
  // @@protoc_insertion_point(field_add_mutable:ChatPb.ContactRES.deleteUserIds)
  return deleteuserids_.Add();
}
inline void ContactRES::add_deleteuserids(const ::std::string& value) {
  deleteuserids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ChatPb.ContactRES.deleteUserIds)
}
#if LANG_CXX11
inline void ContactRES::add_deleteuserids(::std::string&& value) {
  deleteuserids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ChatPb.ContactRES.deleteUserIds)
}
#endif
inline void ContactRES::add_deleteuserids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  deleteuserids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ChatPb.ContactRES.deleteUserIds)
}
inline void ContactRES::add_deleteuserids(const char* value, size_t size) {
  deleteuserids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ChatPb.ContactRES.deleteUserIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ContactRES::deleteuserids() const {
  // @@protoc_insertion_point(field_list:ChatPb.ContactRES.deleteUserIds)
  return deleteuserids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ContactRES::mutable_deleteuserids() {
  // @@protoc_insertion_point(field_mutable_list:ChatPb.ContactRES.deleteUserIds)
  return &deleteuserids_;
}

// int64 timestamp = 3;
inline void ContactRES::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ContactRES::timestamp() const {
  // @@protoc_insertion_point(field_get:ChatPb.ContactRES.timestamp)
  return timestamp_;
}
inline void ContactRES::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ChatPb.ContactRES.timestamp)
}

// -------------------------------------------------------------------

// SearchUserREQ

// string key = 1;
inline void SearchUserREQ::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchUserREQ::key() const {
  // @@protoc_insertion_point(field_get:ChatPb.SearchUserREQ.key)
  return key_.GetNoArena();
}
inline void SearchUserREQ::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.SearchUserREQ.key)
}
#if LANG_CXX11
inline void SearchUserREQ::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.SearchUserREQ.key)
}
#endif
inline void SearchUserREQ::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.SearchUserREQ.key)
}
inline void SearchUserREQ::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.SearchUserREQ.key)
}
inline ::std::string* SearchUserREQ::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.SearchUserREQ.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchUserREQ::release_key() {
  // @@protoc_insertion_point(field_release:ChatPb.SearchUserREQ.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchUserREQ::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.SearchUserREQ.key)
}

// -------------------------------------------------------------------

// SearchUserRES

// repeated .ChatPb.User users = 1;
inline int SearchUserRES::users_size() const {
  return users_.size();
}
inline ::ChatPb::User* SearchUserRES::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:ChatPb.SearchUserRES.users)
  return users_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ChatPb::User >*
SearchUserRES::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:ChatPb.SearchUserRES.users)
  return &users_;
}
inline const ::ChatPb::User& SearchUserRES::users(int index) const {
  // @@protoc_insertion_point(field_get:ChatPb.SearchUserRES.users)
  return users_.Get(index);
}
inline ::ChatPb::User* SearchUserRES::add_users() {
  // @@protoc_insertion_point(field_add:ChatPb.SearchUserRES.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ChatPb::User >&
SearchUserRES::users() const {
  // @@protoc_insertion_point(field_list:ChatPb.SearchUserRES.users)
  return users_;
}

// -------------------------------------------------------------------

// ApplyFriendREQ

// string uid = 1;
inline void ApplyFriendREQ::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplyFriendREQ::uid() const {
  // @@protoc_insertion_point(field_get:ChatPb.ApplyFriendREQ.uid)
  return uid_.GetNoArena();
}
inline void ApplyFriendREQ::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.ApplyFriendREQ.uid)
}
#if LANG_CXX11
inline void ApplyFriendREQ::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.ApplyFriendREQ.uid)
}
#endif
inline void ApplyFriendREQ::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.ApplyFriendREQ.uid)
}
inline void ApplyFriendREQ::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.ApplyFriendREQ.uid)
}
inline ::std::string* ApplyFriendREQ::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.ApplyFriendREQ.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplyFriendREQ::release_uid() {
  // @@protoc_insertion_point(field_release:ChatPb.ApplyFriendREQ.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplyFriendREQ::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.ApplyFriendREQ.uid)
}

// string message = 2;
inline void ApplyFriendREQ::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplyFriendREQ::message() const {
  // @@protoc_insertion_point(field_get:ChatPb.ApplyFriendREQ.message)
  return message_.GetNoArena();
}
inline void ApplyFriendREQ::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.ApplyFriendREQ.message)
}
#if LANG_CXX11
inline void ApplyFriendREQ::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.ApplyFriendREQ.message)
}
#endif
inline void ApplyFriendREQ::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.ApplyFriendREQ.message)
}
inline void ApplyFriendREQ::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.ApplyFriendREQ.message)
}
inline ::std::string* ApplyFriendREQ::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.ApplyFriendREQ.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplyFriendREQ::release_message() {
  // @@protoc_insertion_point(field_release:ChatPb.ApplyFriendREQ.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplyFriendREQ::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.ApplyFriendREQ.message)
}

// -------------------------------------------------------------------

// ApplyFriendRES

// string uid = 1;
inline void ApplyFriendRES::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplyFriendRES::uid() const {
  // @@protoc_insertion_point(field_get:ChatPb.ApplyFriendRES.uid)
  return uid_.GetNoArena();
}
inline void ApplyFriendRES::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.ApplyFriendRES.uid)
}
#if LANG_CXX11
inline void ApplyFriendRES::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.ApplyFriendRES.uid)
}
#endif
inline void ApplyFriendRES::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.ApplyFriendRES.uid)
}
inline void ApplyFriendRES::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.ApplyFriendRES.uid)
}
inline ::std::string* ApplyFriendRES::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.ApplyFriendRES.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplyFriendRES::release_uid() {
  // @@protoc_insertion_point(field_release:ChatPb.ApplyFriendRES.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplyFriendRES::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.ApplyFriendRES.uid)
}

// bool succeeded = 2;
inline void ApplyFriendRES::clear_succeeded() {
  succeeded_ = false;
}
inline bool ApplyFriendRES::succeeded() const {
  // @@protoc_insertion_point(field_get:ChatPb.ApplyFriendRES.succeeded)
  return succeeded_;
}
inline void ApplyFriendRES::set_succeeded(bool value) {
  
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:ChatPb.ApplyFriendRES.succeeded)
}

// -------------------------------------------------------------------

// AgreeFriendREQ

// string uid = 1;
inline void AgreeFriendREQ::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgreeFriendREQ::uid() const {
  // @@protoc_insertion_point(field_get:ChatPb.AgreeFriendREQ.uid)
  return uid_.GetNoArena();
}
inline void AgreeFriendREQ::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.AgreeFriendREQ.uid)
}
#if LANG_CXX11
inline void AgreeFriendREQ::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.AgreeFriendREQ.uid)
}
#endif
inline void AgreeFriendREQ::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.AgreeFriendREQ.uid)
}
inline void AgreeFriendREQ::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.AgreeFriendREQ.uid)
}
inline ::std::string* AgreeFriendREQ::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.AgreeFriendREQ.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgreeFriendREQ::release_uid() {
  // @@protoc_insertion_point(field_release:ChatPb.AgreeFriendREQ.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgreeFriendREQ::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.AgreeFriendREQ.uid)
}

// -------------------------------------------------------------------

// AgreeFriendRES

// string chatId = 1;
inline void AgreeFriendRES::clear_chatid() {
  chatid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgreeFriendRES::chatid() const {
  // @@protoc_insertion_point(field_get:ChatPb.AgreeFriendRES.chatId)
  return chatid_.GetNoArena();
}
inline void AgreeFriendRES::set_chatid(const ::std::string& value) {
  
  chatid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.AgreeFriendRES.chatId)
}
#if LANG_CXX11
inline void AgreeFriendRES::set_chatid(::std::string&& value) {
  
  chatid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.AgreeFriendRES.chatId)
}
#endif
inline void AgreeFriendRES::set_chatid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chatid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.AgreeFriendRES.chatId)
}
inline void AgreeFriendRES::set_chatid(const char* value, size_t size) {
  
  chatid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.AgreeFriendRES.chatId)
}
inline ::std::string* AgreeFriendRES::mutable_chatid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.AgreeFriendRES.chatId)
  return chatid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgreeFriendRES::release_chatid() {
  // @@protoc_insertion_point(field_release:ChatPb.AgreeFriendRES.chatId)
  
  return chatid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgreeFriendRES::set_allocated_chatid(::std::string* chatid) {
  if (chatid != NULL) {
    
  } else {
    
  }
  chatid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.AgreeFriendRES.chatId)
}

// string message = 2;
inline void AgreeFriendRES::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgreeFriendRES::message() const {
  // @@protoc_insertion_point(field_get:ChatPb.AgreeFriendRES.message)
  return message_.GetNoArena();
}
inline void AgreeFriendRES::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.AgreeFriendRES.message)
}
#if LANG_CXX11
inline void AgreeFriendRES::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.AgreeFriendRES.message)
}
#endif
inline void AgreeFriendRES::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.AgreeFriendRES.message)
}
inline void AgreeFriendRES::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.AgreeFriendRES.message)
}
inline ::std::string* AgreeFriendRES::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.AgreeFriendRES.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgreeFriendRES::release_message() {
  // @@protoc_insertion_point(field_release:ChatPb.AgreeFriendRES.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgreeFriendRES::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.AgreeFriendRES.message)
}

// -------------------------------------------------------------------

// DeleteFriendREQ

// string uid = 1;
inline void DeleteFriendREQ::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteFriendREQ::uid() const {
  // @@protoc_insertion_point(field_get:ChatPb.DeleteFriendREQ.uid)
  return uid_.GetNoArena();
}
inline void DeleteFriendREQ::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.DeleteFriendREQ.uid)
}
#if LANG_CXX11
inline void DeleteFriendREQ::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.DeleteFriendREQ.uid)
}
#endif
inline void DeleteFriendREQ::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.DeleteFriendREQ.uid)
}
inline void DeleteFriendREQ::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.DeleteFriendREQ.uid)
}
inline ::std::string* DeleteFriendREQ::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.DeleteFriendREQ.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteFriendREQ::release_uid() {
  // @@protoc_insertion_point(field_release:ChatPb.DeleteFriendREQ.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteFriendREQ::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.DeleteFriendREQ.uid)
}

// -------------------------------------------------------------------

// DeleteFriendRES

// string uid = 1;
inline void DeleteFriendRES::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteFriendRES::uid() const {
  // @@protoc_insertion_point(field_get:ChatPb.DeleteFriendRES.uid)
  return uid_.GetNoArena();
}
inline void DeleteFriendRES::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.DeleteFriendRES.uid)
}
#if LANG_CXX11
inline void DeleteFriendRES::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.DeleteFriendRES.uid)
}
#endif
inline void DeleteFriendRES::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.DeleteFriendRES.uid)
}
inline void DeleteFriendRES::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.DeleteFriendRES.uid)
}
inline ::std::string* DeleteFriendRES::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.DeleteFriendRES.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteFriendRES::release_uid() {
  // @@protoc_insertion_point(field_release:ChatPb.DeleteFriendRES.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteFriendRES::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.DeleteFriendRES.uid)
}

// bool succeeded = 2;
inline void DeleteFriendRES::clear_succeeded() {
  succeeded_ = false;
}
inline bool DeleteFriendRES::succeeded() const {
  // @@protoc_insertion_point(field_get:ChatPb.DeleteFriendRES.succeeded)
  return succeeded_;
}
inline void DeleteFriendRES::set_succeeded(bool value) {
  
  succeeded_ = value;
  // @@protoc_insertion_point(field_set:ChatPb.DeleteFriendRES.succeeded)
}

// string message = 3;
inline void DeleteFriendRES::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteFriendRES::message() const {
  // @@protoc_insertion_point(field_get:ChatPb.DeleteFriendRES.message)
  return message_.GetNoArena();
}
inline void DeleteFriendRES::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.DeleteFriendRES.message)
}
#if LANG_CXX11
inline void DeleteFriendRES::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.DeleteFriendRES.message)
}
#endif
inline void DeleteFriendRES::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.DeleteFriendRES.message)
}
inline void DeleteFriendRES::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.DeleteFriendRES.message)
}
inline ::std::string* DeleteFriendRES::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.DeleteFriendRES.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteFriendRES::release_message() {
  // @@protoc_insertion_point(field_release:ChatPb.DeleteFriendRES.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteFriendRES::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.DeleteFriendRES.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChatPb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chat_2econtacts_2eproto
