// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.base.proto

#include "chat.base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace ChatPb {
}  // namespace ChatPb
namespace protobuf_chat_2ebase_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "chat.base.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017chat.base.proto\022\006ChatPb*\235\004\n\003CMD\022\014\n\010CMD"
      "_ZERO\020\000\022\014\n\010CMD_PING\020\001\022\014\n\010CMD_PONG\020\002\022\025\n\021C"
      "MD_AUTHORIZE_REQ\020e\022\025\n\021CMD_AUTHORIZE_RES\020"
      "f\022\024\n\020CMD_CONTACTS_REQ\020g\022\024\n\020CMD_CONTACTS_"
      "RES\020h\022\025\n\021CMD_UNRECEIVE_REQ\020i\022\025\n\021CMD_UNRE"
      "CEIVE_RES\020j\022\030\n\024CMD_MESSAGE_TRANSFER\020l\022\023\n"
      "\017CMD_MESSAGE_ACK\020n\022\027\n\023CMD_NOTIFY_TRANSFE"
      "R\020p\022\022\n\016CMD_NOTIFY_ACK\020r\022\033\n\027CMD_REFRESH_P"
      "ROFILE_REQ\020s\022\033\n\027CMD_REFRESH_PROFILE_RES\020"
      "t\022\027\n\023CMD_SEARCH_USER_REQ\020u\022\027\n\023CMD_SEARCH"
      "_USER_RES\020v\022\030\n\024CMD_APPLY_FRIEND_REQ\020w\022\030\n"
      "\024CMD_APPLY_FRIEND_RES\020x\022\030\n\024CMD_AGREE_FRI"
      "END_REQ\020y\022\030\n\024CMD_AGREE_FRIEND_RES\020z\022\031\n\025C"
      "MD_DELETE_FRIEND_REQ\020{\022\031\n\025CMD_DELETE_FRI"
      "END_RES\020|*\031\n\tErrorCode\022\014\n\010ERR_NONE\020\000b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 604);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.base.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chat_2ebase_2eproto
namespace ChatPb {
const ::google::protobuf::EnumDescriptor* CMD_descriptor() {
  protobuf_chat_2ebase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_2ebase_2eproto::file_level_enum_descriptors[0];
}
bool CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 108:
    case 110:
    case 112:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_chat_2ebase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_2ebase_2eproto::file_level_enum_descriptors[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ChatPb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
