// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.notification.proto

#ifndef PROTOBUF_INCLUDED_chat_2enotification_2eproto
#define PROTOBUF_INCLUDED_chat_2enotification_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "chat.user.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2enotification_2eproto 

namespace protobuf_chat_2enotification_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chat_2enotification_2eproto
namespace ChatPb {
class Notification;
class NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
class NotificationAck;
class NotificationAckDefaultTypeInternal;
extern NotificationAckDefaultTypeInternal _NotificationAck_default_instance_;
class NotificationApplyFriend;
class NotificationApplyFriendDefaultTypeInternal;
extern NotificationApplyFriendDefaultTypeInternal _NotificationApplyFriend_default_instance_;
class NotificationTransfer;
class NotificationTransferDefaultTypeInternal;
extern NotificationTransferDefaultTypeInternal _NotificationTransfer_default_instance_;
}  // namespace ChatPb
namespace google {
namespace protobuf {
template<> ::ChatPb::Notification* Arena::CreateMaybeMessage<::ChatPb::Notification>(Arena*);
template<> ::ChatPb::NotificationAck* Arena::CreateMaybeMessage<::ChatPb::NotificationAck>(Arena*);
template<> ::ChatPb::NotificationApplyFriend* Arena::CreateMaybeMessage<::ChatPb::NotificationApplyFriend>(Arena*);
template<> ::ChatPb::NotificationTransfer* Arena::CreateMaybeMessage<::ChatPb::NotificationTransfer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ChatPb {

enum NotificationType {
  APPLY_FRIEND = 0,
  NotificationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NotificationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NotificationType_IsValid(int value);
const NotificationType NotificationType_MIN = APPLY_FRIEND;
const NotificationType NotificationType_MAX = APPLY_FRIEND;
const int NotificationType_ARRAYSIZE = NotificationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotificationType_descriptor();
inline const ::std::string& NotificationType_Name(NotificationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotificationType_descriptor(), value);
}
inline bool NotificationType_Parse(
    const ::std::string& name, NotificationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotificationType>(
    NotificationType_descriptor(), name, value);
}
// ===================================================================

class Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.Notification) */ {
 public:
  Notification();
  virtual ~Notification();

  Notification(const Notification& from);

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Notification(Notification&& from) noexcept
    : Notification() {
    *this = ::std::move(from);
  }

  inline Notification& operator=(Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
               &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Notification* other);
  friend void swap(Notification& a, Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Notification* New() const final {
    return CreateMaybeMessage<Notification>(NULL);
  }

  Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msgid = 2;
  void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  const ::std::string& msgid() const;
  void set_msgid(const ::std::string& value);
  #if LANG_CXX11
  void set_msgid(::std::string&& value);
  #endif
  void set_msgid(const char* value);
  void set_msgid(const char* value, size_t size);
  ::std::string* mutable_msgid();
  ::std::string* release_msgid();
  void set_allocated_msgid(::std::string* msgid);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .ChatPb.NotificationType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ChatPb::NotificationType type() const;
  void set_type(::ChatPb::NotificationType value);

  // @@protoc_insertion_point(class_scope:ChatPb.Notification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgid_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2enotification_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotificationTransfer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.NotificationTransfer) */ {
 public:
  NotificationTransfer();
  virtual ~NotificationTransfer();

  NotificationTransfer(const NotificationTransfer& from);

  inline NotificationTransfer& operator=(const NotificationTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotificationTransfer(NotificationTransfer&& from) noexcept
    : NotificationTransfer() {
    *this = ::std::move(from);
  }

  inline NotificationTransfer& operator=(NotificationTransfer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotificationTransfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationTransfer* internal_default_instance() {
    return reinterpret_cast<const NotificationTransfer*>(
               &_NotificationTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NotificationTransfer* other);
  friend void swap(NotificationTransfer& a, NotificationTransfer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotificationTransfer* New() const final {
    return CreateMaybeMessage<NotificationTransfer>(NULL);
  }

  NotificationTransfer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotificationTransfer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotificationTransfer& from);
  void MergeFrom(const NotificationTransfer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationTransfer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ChatPb.Notification notifications = 1;
  int notifications_size() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 1;
  ::ChatPb::Notification* mutable_notifications(int index);
  ::google::protobuf::RepeatedPtrField< ::ChatPb::Notification >*
      mutable_notifications();
  const ::ChatPb::Notification& notifications(int index) const;
  ::ChatPb::Notification* add_notifications();
  const ::google::protobuf::RepeatedPtrField< ::ChatPb::Notification >&
      notifications() const;

  // @@protoc_insertion_point(class_scope:ChatPb.NotificationTransfer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ChatPb::Notification > notifications_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2enotification_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotificationAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.NotificationAck) */ {
 public:
  NotificationAck();
  virtual ~NotificationAck();

  NotificationAck(const NotificationAck& from);

  inline NotificationAck& operator=(const NotificationAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotificationAck(NotificationAck&& from) noexcept
    : NotificationAck() {
    *this = ::std::move(from);
  }

  inline NotificationAck& operator=(NotificationAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotificationAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationAck* internal_default_instance() {
    return reinterpret_cast<const NotificationAck*>(
               &_NotificationAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NotificationAck* other);
  friend void swap(NotificationAck& a, NotificationAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotificationAck* New() const final {
    return CreateMaybeMessage<NotificationAck>(NULL);
  }

  NotificationAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotificationAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotificationAck& from);
  void MergeFrom(const NotificationAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msgid = 1;
  void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  const ::std::string& msgid() const;
  void set_msgid(const ::std::string& value);
  #if LANG_CXX11
  void set_msgid(::std::string&& value);
  #endif
  void set_msgid(const char* value);
  void set_msgid(const char* value, size_t size);
  ::std::string* mutable_msgid();
  ::std::string* release_msgid();
  void set_allocated_msgid(::std::string* msgid);

  // @@protoc_insertion_point(class_scope:ChatPb.NotificationAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2enotification_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotificationApplyFriend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.NotificationApplyFriend) */ {
 public:
  NotificationApplyFriend();
  virtual ~NotificationApplyFriend();

  NotificationApplyFriend(const NotificationApplyFriend& from);

  inline NotificationApplyFriend& operator=(const NotificationApplyFriend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotificationApplyFriend(NotificationApplyFriend&& from) noexcept
    : NotificationApplyFriend() {
    *this = ::std::move(from);
  }

  inline NotificationApplyFriend& operator=(NotificationApplyFriend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotificationApplyFriend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationApplyFriend* internal_default_instance() {
    return reinterpret_cast<const NotificationApplyFriend*>(
               &_NotificationApplyFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NotificationApplyFriend* other);
  friend void swap(NotificationApplyFriend& a, NotificationApplyFriend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotificationApplyFriend* New() const final {
    return CreateMaybeMessage<NotificationApplyFriend>(NULL);
  }

  NotificationApplyFriend* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotificationApplyFriend>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotificationApplyFriend& from);
  void MergeFrom(const NotificationApplyFriend& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationApplyFriend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .ChatPb.User user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  private:
  const ::ChatPb::User& _internal_user() const;
  public:
  const ::ChatPb::User& user() const;
  ::ChatPb::User* release_user();
  ::ChatPb::User* mutable_user();
  void set_allocated_user(::ChatPb::User* user);

  // @@protoc_insertion_point(class_scope:ChatPb.NotificationApplyFriend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::ChatPb::User* user_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2enotification_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Notification

// .ChatPb.NotificationType type = 1;
inline void Notification::clear_type() {
  type_ = 0;
}
inline ::ChatPb::NotificationType Notification::type() const {
  // @@protoc_insertion_point(field_get:ChatPb.Notification.type)
  return static_cast< ::ChatPb::NotificationType >(type_);
}
inline void Notification::set_type(::ChatPb::NotificationType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ChatPb.Notification.type)
}

// string msgid = 2;
inline void Notification::clear_msgid() {
  msgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Notification::msgid() const {
  // @@protoc_insertion_point(field_get:ChatPb.Notification.msgid)
  return msgid_.GetNoArena();
}
inline void Notification::set_msgid(const ::std::string& value) {
  
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.Notification.msgid)
}
#if LANG_CXX11
inline void Notification::set_msgid(::std::string&& value) {
  
  msgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Notification.msgid)
}
#endif
inline void Notification::set_msgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Notification.msgid)
}
inline void Notification::set_msgid(const char* value, size_t size) {
  
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Notification.msgid)
}
inline ::std::string* Notification::mutable_msgid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.Notification.msgid)
  return msgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Notification::release_msgid() {
  // @@protoc_insertion_point(field_release:ChatPb.Notification.msgid)
  
  return msgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_msgid(::std::string* msgid) {
  if (msgid != NULL) {
    
  } else {
    
  }
  msgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Notification.msgid)
}

// bytes data = 3;
inline void Notification::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Notification::data() const {
  // @@protoc_insertion_point(field_get:ChatPb.Notification.data)
  return data_.GetNoArena();
}
inline void Notification::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.Notification.data)
}
#if LANG_CXX11
inline void Notification::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Notification.data)
}
#endif
inline void Notification::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Notification.data)
}
inline void Notification::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Notification.data)
}
inline ::std::string* Notification::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.Notification.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Notification::release_data() {
  // @@protoc_insertion_point(field_release:ChatPb.Notification.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Notification::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Notification.data)
}

// -------------------------------------------------------------------

// NotificationTransfer

// repeated .ChatPb.Notification notifications = 1;
inline int NotificationTransfer::notifications_size() const {
  return notifications_.size();
}
inline void NotificationTransfer::clear_notifications() {
  notifications_.Clear();
}
inline ::ChatPb::Notification* NotificationTransfer::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:ChatPb.NotificationTransfer.notifications)
  return notifications_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ChatPb::Notification >*
NotificationTransfer::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:ChatPb.NotificationTransfer.notifications)
  return &notifications_;
}
inline const ::ChatPb::Notification& NotificationTransfer::notifications(int index) const {
  // @@protoc_insertion_point(field_get:ChatPb.NotificationTransfer.notifications)
  return notifications_.Get(index);
}
inline ::ChatPb::Notification* NotificationTransfer::add_notifications() {
  // @@protoc_insertion_point(field_add:ChatPb.NotificationTransfer.notifications)
  return notifications_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ChatPb::Notification >&
NotificationTransfer::notifications() const {
  // @@protoc_insertion_point(field_list:ChatPb.NotificationTransfer.notifications)
  return notifications_;
}

// -------------------------------------------------------------------

// NotificationAck

// string msgid = 1;
inline void NotificationAck::clear_msgid() {
  msgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotificationAck::msgid() const {
  // @@protoc_insertion_point(field_get:ChatPb.NotificationAck.msgid)
  return msgid_.GetNoArena();
}
inline void NotificationAck::set_msgid(const ::std::string& value) {
  
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.NotificationAck.msgid)
}
#if LANG_CXX11
inline void NotificationAck::set_msgid(::std::string&& value) {
  
  msgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.NotificationAck.msgid)
}
#endif
inline void NotificationAck::set_msgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.NotificationAck.msgid)
}
inline void NotificationAck::set_msgid(const char* value, size_t size) {
  
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.NotificationAck.msgid)
}
inline ::std::string* NotificationAck::mutable_msgid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.NotificationAck.msgid)
  return msgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotificationAck::release_msgid() {
  // @@protoc_insertion_point(field_release:ChatPb.NotificationAck.msgid)
  
  return msgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationAck::set_allocated_msgid(::std::string* msgid) {
  if (msgid != NULL) {
    
  } else {
    
  }
  msgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.NotificationAck.msgid)
}

// -------------------------------------------------------------------

// NotificationApplyFriend

// .ChatPb.User user = 1;
inline bool NotificationApplyFriend::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline const ::ChatPb::User& NotificationApplyFriend::_internal_user() const {
  return *user_;
}
inline const ::ChatPb::User& NotificationApplyFriend::user() const {
  const ::ChatPb::User* p = user_;
  // @@protoc_insertion_point(field_get:ChatPb.NotificationApplyFriend.user)
  return p != NULL ? *p : *reinterpret_cast<const ::ChatPb::User*>(
      &::ChatPb::_User_default_instance_);
}
inline ::ChatPb::User* NotificationApplyFriend::release_user() {
  // @@protoc_insertion_point(field_release:ChatPb.NotificationApplyFriend.user)
  
  ::ChatPb::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::ChatPb::User* NotificationApplyFriend::mutable_user() {
  
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::ChatPb::User>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ChatPb.NotificationApplyFriend.user)
  return user_;
}
inline void NotificationApplyFriend::set_allocated_user(::ChatPb::User* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_);
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:ChatPb.NotificationApplyFriend.user)
}

// string message = 2;
inline void NotificationApplyFriend::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotificationApplyFriend::message() const {
  // @@protoc_insertion_point(field_get:ChatPb.NotificationApplyFriend.message)
  return message_.GetNoArena();
}
inline void NotificationApplyFriend::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.NotificationApplyFriend.message)
}
#if LANG_CXX11
inline void NotificationApplyFriend::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.NotificationApplyFriend.message)
}
#endif
inline void NotificationApplyFriend::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.NotificationApplyFriend.message)
}
inline void NotificationApplyFriend::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.NotificationApplyFriend.message)
}
inline ::std::string* NotificationApplyFriend::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.NotificationApplyFriend.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotificationApplyFriend::release_message() {
  // @@protoc_insertion_point(field_release:ChatPb.NotificationApplyFriend.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationApplyFriend::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.NotificationApplyFriend.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChatPb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ChatPb::NotificationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatPb::NotificationType>() {
  return ::ChatPb::NotificationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chat_2enotification_2eproto
