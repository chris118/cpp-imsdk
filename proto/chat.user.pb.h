// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.user.proto

#ifndef PROTOBUF_INCLUDED_chat_2euser_2eproto
#define PROTOBUF_INCLUDED_chat_2euser_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2euser_2eproto 

namespace protobuf_chat_2euser_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chat_2euser_2eproto
namespace ChatPb {
class RefreshUserREQ;
class RefreshUserREQDefaultTypeInternal;
extern RefreshUserREQDefaultTypeInternal _RefreshUserREQ_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace ChatPb
namespace google {
namespace protobuf {
template<> ::ChatPb::RefreshUserREQ* Arena::CreateMaybeMessage<::ChatPb::RefreshUserREQ>(Arena*);
template<> ::ChatPb::User* Arena::CreateMaybeMessage<::ChatPb::User>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ChatPb {

// ===================================================================

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(NULL);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string chatId = 2;
  void clear_chatid();
  static const int kChatIdFieldNumber = 2;
  const ::std::string& chatid() const;
  void set_chatid(const ::std::string& value);
  #if LANG_CXX11
  void set_chatid(::std::string&& value);
  #endif
  void set_chatid(const char* value);
  void set_chatid(const char* value, size_t size);
  ::std::string* mutable_chatid();
  ::std::string* release_chatid();
  void set_allocated_chatid(::std::string* chatid);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string remark = 4;
  void clear_remark();
  static const int kRemarkFieldNumber = 4;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // string avatar = 5;
  void clear_avatar();
  static const int kAvatarFieldNumber = 5;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // string gender = 6;
  void clear_gender();
  static const int kGenderFieldNumber = 6;
  const ::std::string& gender() const;
  void set_gender(const ::std::string& value);
  #if LANG_CXX11
  void set_gender(::std::string&& value);
  #endif
  void set_gender(const char* value);
  void set_gender(const char* value, size_t size);
  ::std::string* mutable_gender();
  ::std::string* release_gender();
  void set_allocated_gender(::std::string* gender);

  // string birthday = 7;
  void clear_birthday();
  static const int kBirthdayFieldNumber = 7;
  const ::std::string& birthday() const;
  void set_birthday(const ::std::string& value);
  #if LANG_CXX11
  void set_birthday(::std::string&& value);
  #endif
  void set_birthday(const char* value);
  void set_birthday(const char* value, size_t size);
  ::std::string* mutable_birthday();
  ::std::string* release_birthday();
  void set_allocated_birthday(::std::string* birthday);

  // @@protoc_insertion_point(class_scope:ChatPb.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr chatid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::google::protobuf::internal::ArenaStringPtr gender_;
  ::google::protobuf::internal::ArenaStringPtr birthday_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2euser_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RefreshUserREQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.RefreshUserREQ) */ {
 public:
  RefreshUserREQ();
  virtual ~RefreshUserREQ();

  RefreshUserREQ(const RefreshUserREQ& from);

  inline RefreshUserREQ& operator=(const RefreshUserREQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefreshUserREQ(RefreshUserREQ&& from) noexcept
    : RefreshUserREQ() {
    *this = ::std::move(from);
  }

  inline RefreshUserREQ& operator=(RefreshUserREQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshUserREQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefreshUserREQ* internal_default_instance() {
    return reinterpret_cast<const RefreshUserREQ*>(
               &_RefreshUserREQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RefreshUserREQ* other);
  friend void swap(RefreshUserREQ& a, RefreshUserREQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefreshUserREQ* New() const final {
    return CreateMaybeMessage<RefreshUserREQ>(NULL);
  }

  RefreshUserREQ* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RefreshUserREQ>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RefreshUserREQ& from);
  void MergeFrom(const RefreshUserREQ& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefreshUserREQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:ChatPb.RefreshUserREQ)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2euser_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// string id = 1;
inline void User::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::id() const {
  // @@protoc_insertion_point(field_get:ChatPb.User.id)
  return id_.GetNoArena();
}
inline void User::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.User.id)
}
#if LANG_CXX11
inline void User::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.User.id)
}
#endif
inline void User::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.User.id)
}
inline void User::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.User.id)
}
inline ::std::string* User::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.User.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:ChatPb.User.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.User.id)
}

// string chatId = 2;
inline void User::clear_chatid() {
  chatid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::chatid() const {
  // @@protoc_insertion_point(field_get:ChatPb.User.chatId)
  return chatid_.GetNoArena();
}
inline void User::set_chatid(const ::std::string& value) {
  
  chatid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.User.chatId)
}
#if LANG_CXX11
inline void User::set_chatid(::std::string&& value) {
  
  chatid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.User.chatId)
}
#endif
inline void User::set_chatid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chatid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.User.chatId)
}
inline void User::set_chatid(const char* value, size_t size) {
  
  chatid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.User.chatId)
}
inline ::std::string* User::mutable_chatid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.User.chatId)
  return chatid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_chatid() {
  // @@protoc_insertion_point(field_release:ChatPb.User.chatId)
  
  return chatid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_chatid(::std::string* chatid) {
  if (chatid != NULL) {
    
  } else {
    
  }
  chatid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.User.chatId)
}

// string name = 3;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:ChatPb.User.name)
  return name_.GetNoArena();
}
inline void User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.User.name)
}
#if LANG_CXX11
inline void User::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.User.name)
}
#endif
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.User.name)
}
inline void User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.User.name)
}
inline ::std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:ChatPb.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.User.name)
}

// string remark = 4;
inline void User::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::remark() const {
  // @@protoc_insertion_point(field_get:ChatPb.User.remark)
  return remark_.GetNoArena();
}
inline void User::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.User.remark)
}
#if LANG_CXX11
inline void User::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.User.remark)
}
#endif
inline void User::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.User.remark)
}
inline void User::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.User.remark)
}
inline ::std::string* User::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.User.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_remark() {
  // @@protoc_insertion_point(field_release:ChatPb.User.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.User.remark)
}

// string avatar = 5;
inline void User::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::avatar() const {
  // @@protoc_insertion_point(field_get:ChatPb.User.avatar)
  return avatar_.GetNoArena();
}
inline void User::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.User.avatar)
}
#if LANG_CXX11
inline void User::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.User.avatar)
}
#endif
inline void User::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.User.avatar)
}
inline void User::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.User.avatar)
}
inline ::std::string* User::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.User.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_avatar() {
  // @@protoc_insertion_point(field_release:ChatPb.User.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.User.avatar)
}

// string gender = 6;
inline void User::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::gender() const {
  // @@protoc_insertion_point(field_get:ChatPb.User.gender)
  return gender_.GetNoArena();
}
inline void User::set_gender(const ::std::string& value) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.User.gender)
}
#if LANG_CXX11
inline void User::set_gender(::std::string&& value) {
  
  gender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.User.gender)
}
#endif
inline void User::set_gender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.User.gender)
}
inline void User::set_gender(const char* value, size_t size) {
  
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.User.gender)
}
inline ::std::string* User::mutable_gender() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.User.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_gender() {
  // @@protoc_insertion_point(field_release:ChatPb.User.gender)
  
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_gender(::std::string* gender) {
  if (gender != NULL) {
    
  } else {
    
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.User.gender)
}

// string birthday = 7;
inline void User::clear_birthday() {
  birthday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::birthday() const {
  // @@protoc_insertion_point(field_get:ChatPb.User.birthday)
  return birthday_.GetNoArena();
}
inline void User::set_birthday(const ::std::string& value) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.User.birthday)
}
#if LANG_CXX11
inline void User::set_birthday(::std::string&& value) {
  
  birthday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.User.birthday)
}
#endif
inline void User::set_birthday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.User.birthday)
}
inline void User::set_birthday(const char* value, size_t size) {
  
  birthday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.User.birthday)
}
inline ::std::string* User::mutable_birthday() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.User.birthday)
  return birthday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_birthday() {
  // @@protoc_insertion_point(field_release:ChatPb.User.birthday)
  
  return birthday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_birthday(::std::string* birthday) {
  if (birthday != NULL) {
    
  } else {
    
  }
  birthday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birthday);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.User.birthday)
}

// -------------------------------------------------------------------

// RefreshUserREQ

// string uid = 1;
inline void RefreshUserREQ::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefreshUserREQ::uid() const {
  // @@protoc_insertion_point(field_get:ChatPb.RefreshUserREQ.uid)
  return uid_.GetNoArena();
}
inline void RefreshUserREQ::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.RefreshUserREQ.uid)
}
#if LANG_CXX11
inline void RefreshUserREQ::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.RefreshUserREQ.uid)
}
#endif
inline void RefreshUserREQ::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.RefreshUserREQ.uid)
}
inline void RefreshUserREQ::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.RefreshUserREQ.uid)
}
inline ::std::string* RefreshUserREQ::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.RefreshUserREQ.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefreshUserREQ::release_uid() {
  // @@protoc_insertion_point(field_release:ChatPb.RefreshUserREQ.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefreshUserREQ::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.RefreshUserREQ.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChatPb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chat_2euser_2eproto
