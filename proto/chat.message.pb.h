// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.message.proto

#ifndef PROTOBUF_INCLUDED_chat_2emessage_2eproto
#define PROTOBUF_INCLUDED_chat_2emessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2emessage_2eproto 

namespace protobuf_chat_2emessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chat_2emessage_2eproto
namespace ChatPb {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class MsgAck;
class MsgAckDefaultTypeInternal;
extern MsgAckDefaultTypeInternal _MsgAck_default_instance_;
class UnreceivedMessage;
class UnreceivedMessageDefaultTypeInternal;
extern UnreceivedMessageDefaultTypeInternal _UnreceivedMessage_default_instance_;
class UnreceivedMessageRES;
class UnreceivedMessageRESDefaultTypeInternal;
extern UnreceivedMessageRESDefaultTypeInternal _UnreceivedMessageRES_default_instance_;
class openReceivedMessageREQ;
class openReceivedMessageREQDefaultTypeInternal;
extern openReceivedMessageREQDefaultTypeInternal _openReceivedMessageREQ_default_instance_;
}  // namespace ChatPb
namespace google {
namespace protobuf {
template<> ::ChatPb::Message* Arena::CreateMaybeMessage<::ChatPb::Message>(Arena*);
template<> ::ChatPb::MsgAck* Arena::CreateMaybeMessage<::ChatPb::MsgAck>(Arena*);
template<> ::ChatPb::UnreceivedMessage* Arena::CreateMaybeMessage<::ChatPb::UnreceivedMessage>(Arena*);
template<> ::ChatPb::UnreceivedMessageRES* Arena::CreateMaybeMessage<::ChatPb::UnreceivedMessageRES>(Arena*);
template<> ::ChatPb::openReceivedMessageREQ* Arena::CreateMaybeMessage<::ChatPb::openReceivedMessageREQ>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ChatPb {

// ===================================================================

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string chatId = 1;
  void clear_chatid();
  static const int kChatIdFieldNumber = 1;
  const ::std::string& chatid() const;
  void set_chatid(const ::std::string& value);
  #if LANG_CXX11
  void set_chatid(::std::string&& value);
  #endif
  void set_chatid(const char* value);
  void set_chatid(const char* value, size_t size);
  ::std::string* mutable_chatid();
  ::std::string* release_chatid();
  void set_allocated_chatid(::std::string* chatid);

  // string fromUserId = 2;
  void clear_fromuserid();
  static const int kFromUserIdFieldNumber = 2;
  const ::std::string& fromuserid() const;
  void set_fromuserid(const ::std::string& value);
  #if LANG_CXX11
  void set_fromuserid(::std::string&& value);
  #endif
  void set_fromuserid(const char* value);
  void set_fromuserid(const char* value, size_t size);
  ::std::string* mutable_fromuserid();
  ::std::string* release_fromuserid();
  void set_allocated_fromuserid(::std::string* fromuserid);

  // string messageId = 3;
  void clear_messageid();
  static const int kMessageIdFieldNumber = 3;
  const ::std::string& messageid() const;
  void set_messageid(const ::std::string& value);
  #if LANG_CXX11
  void set_messageid(::std::string&& value);
  #endif
  void set_messageid(const char* value);
  void set_messageid(const char* value, size_t size);
  ::std::string* mutable_messageid();
  ::std::string* release_messageid();
  void set_allocated_messageid(::std::string* messageid);

  // string message = 4;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string localId = 5;
  void clear_localid();
  static const int kLocalIdFieldNumber = 5;
  const ::std::string& localid() const;
  void set_localid(const ::std::string& value);
  #if LANG_CXX11
  void set_localid(::std::string&& value);
  #endif
  void set_localid(const char* value);
  void set_localid(const char* value, size_t size);
  ::std::string* mutable_localid();
  ::std::string* release_localid();
  void set_allocated_localid(::std::string* localid);

  // @@protoc_insertion_point(class_scope:ChatPb.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr chatid_;
  ::google::protobuf::internal::ArenaStringPtr fromuserid_;
  ::google::protobuf::internal::ArenaStringPtr messageid_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr localid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2emessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.MsgAck) */ {
 public:
  MsgAck();
  virtual ~MsgAck();

  MsgAck(const MsgAck& from);

  inline MsgAck& operator=(const MsgAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgAck(MsgAck&& from) noexcept
    : MsgAck() {
    *this = ::std::move(from);
  }

  inline MsgAck& operator=(MsgAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgAck* internal_default_instance() {
    return reinterpret_cast<const MsgAck*>(
               &_MsgAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MsgAck* other);
  friend void swap(MsgAck& a, MsgAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgAck* New() const final {
    return CreateMaybeMessage<MsgAck>(NULL);
  }

  MsgAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgAck& from);
  void MergeFrom(const MsgAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string chatId = 1;
  void clear_chatid();
  static const int kChatIdFieldNumber = 1;
  const ::std::string& chatid() const;
  void set_chatid(const ::std::string& value);
  #if LANG_CXX11
  void set_chatid(::std::string&& value);
  #endif
  void set_chatid(const char* value);
  void set_chatid(const char* value, size_t size);
  ::std::string* mutable_chatid();
  ::std::string* release_chatid();
  void set_allocated_chatid(::std::string* chatid);

  // string fromUserId = 2;
  void clear_fromuserid();
  static const int kFromUserIdFieldNumber = 2;
  const ::std::string& fromuserid() const;
  void set_fromuserid(const ::std::string& value);
  #if LANG_CXX11
  void set_fromuserid(::std::string&& value);
  #endif
  void set_fromuserid(const char* value);
  void set_fromuserid(const char* value, size_t size);
  ::std::string* mutable_fromuserid();
  ::std::string* release_fromuserid();
  void set_allocated_fromuserid(::std::string* fromuserid);

  // @@protoc_insertion_point(class_scope:ChatPb.MsgAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr chatid_;
  ::google::protobuf::internal::ArenaStringPtr fromuserid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2emessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnreceivedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.UnreceivedMessage) */ {
 public:
  UnreceivedMessage();
  virtual ~UnreceivedMessage();

  UnreceivedMessage(const UnreceivedMessage& from);

  inline UnreceivedMessage& operator=(const UnreceivedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnreceivedMessage(UnreceivedMessage&& from) noexcept
    : UnreceivedMessage() {
    *this = ::std::move(from);
  }

  inline UnreceivedMessage& operator=(UnreceivedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnreceivedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnreceivedMessage* internal_default_instance() {
    return reinterpret_cast<const UnreceivedMessage*>(
               &_UnreceivedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UnreceivedMessage* other);
  friend void swap(UnreceivedMessage& a, UnreceivedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnreceivedMessage* New() const final {
    return CreateMaybeMessage<UnreceivedMessage>(NULL);
  }

  UnreceivedMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnreceivedMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnreceivedMessage& from);
  void MergeFrom(const UnreceivedMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnreceivedMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ChatPb.Message msgs = 2;
  int msgs_size() const;
  void clear_msgs();
  static const int kMsgsFieldNumber = 2;
  ::ChatPb::Message* mutable_msgs(int index);
  ::google::protobuf::RepeatedPtrField< ::ChatPb::Message >*
      mutable_msgs();
  const ::ChatPb::Message& msgs(int index) const;
  ::ChatPb::Message* add_msgs();
  const ::google::protobuf::RepeatedPtrField< ::ChatPb::Message >&
      msgs() const;

  // int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ChatPb.UnreceivedMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ChatPb::Message > msgs_;
  ::google::protobuf::int32 count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2emessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class openReceivedMessageREQ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.openReceivedMessageREQ) */ {
 public:
  openReceivedMessageREQ();
  virtual ~openReceivedMessageREQ();

  openReceivedMessageREQ(const openReceivedMessageREQ& from);

  inline openReceivedMessageREQ& operator=(const openReceivedMessageREQ& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  openReceivedMessageREQ(openReceivedMessageREQ&& from) noexcept
    : openReceivedMessageREQ() {
    *this = ::std::move(from);
  }

  inline openReceivedMessageREQ& operator=(openReceivedMessageREQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const openReceivedMessageREQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const openReceivedMessageREQ* internal_default_instance() {
    return reinterpret_cast<const openReceivedMessageREQ*>(
               &_openReceivedMessageREQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(openReceivedMessageREQ* other);
  friend void swap(openReceivedMessageREQ& a, openReceivedMessageREQ& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline openReceivedMessageREQ* New() const final {
    return CreateMaybeMessage<openReceivedMessageREQ>(NULL);
  }

  openReceivedMessageREQ* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<openReceivedMessageREQ>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const openReceivedMessageREQ& from);
  void MergeFrom(const openReceivedMessageREQ& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(openReceivedMessageREQ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool on = 1;
  void clear_on();
  static const int kOnFieldNumber = 1;
  bool on() const;
  void set_on(bool value);

  // @@protoc_insertion_point(class_scope:ChatPb.openReceivedMessageREQ)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool on_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2emessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnreceivedMessageRES : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatPb.UnreceivedMessageRES) */ {
 public:
  UnreceivedMessageRES();
  virtual ~UnreceivedMessageRES();

  UnreceivedMessageRES(const UnreceivedMessageRES& from);

  inline UnreceivedMessageRES& operator=(const UnreceivedMessageRES& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnreceivedMessageRES(UnreceivedMessageRES&& from) noexcept
    : UnreceivedMessageRES() {
    *this = ::std::move(from);
  }

  inline UnreceivedMessageRES& operator=(UnreceivedMessageRES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnreceivedMessageRES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnreceivedMessageRES* internal_default_instance() {
    return reinterpret_cast<const UnreceivedMessageRES*>(
               &_UnreceivedMessageRES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UnreceivedMessageRES* other);
  friend void swap(UnreceivedMessageRES& a, UnreceivedMessageRES& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnreceivedMessageRES* New() const final {
    return CreateMaybeMessage<UnreceivedMessageRES>(NULL);
  }

  UnreceivedMessageRES* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnreceivedMessageRES>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnreceivedMessageRES& from);
  void MergeFrom(const UnreceivedMessageRES& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnreceivedMessageRES* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ChatPb.UnreceivedMessage unreceivedMessages = 1;
  int unreceivedmessages_size() const;
  void clear_unreceivedmessages();
  static const int kUnreceivedMessagesFieldNumber = 1;
  ::ChatPb::UnreceivedMessage* mutable_unreceivedmessages(int index);
  ::google::protobuf::RepeatedPtrField< ::ChatPb::UnreceivedMessage >*
      mutable_unreceivedmessages();
  const ::ChatPb::UnreceivedMessage& unreceivedmessages(int index) const;
  ::ChatPb::UnreceivedMessage* add_unreceivedmessages();
  const ::google::protobuf::RepeatedPtrField< ::ChatPb::UnreceivedMessage >&
      unreceivedmessages() const;

  // @@protoc_insertion_point(class_scope:ChatPb.UnreceivedMessageRES)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ChatPb::UnreceivedMessage > unreceivedmessages_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_2emessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// string chatId = 1;
inline void Message::clear_chatid() {
  chatid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::chatid() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.chatId)
  return chatid_.GetNoArena();
}
inline void Message::set_chatid(const ::std::string& value) {
  
  chatid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.chatId)
}
#if LANG_CXX11
inline void Message::set_chatid(::std::string&& value) {
  
  chatid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Message.chatId)
}
#endif
inline void Message::set_chatid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chatid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Message.chatId)
}
inline void Message::set_chatid(const char* value, size_t size) {
  
  chatid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Message.chatId)
}
inline ::std::string* Message::mutable_chatid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.Message.chatId)
  return chatid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_chatid() {
  // @@protoc_insertion_point(field_release:ChatPb.Message.chatId)
  
  return chatid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_chatid(::std::string* chatid) {
  if (chatid != NULL) {
    
  } else {
    
  }
  chatid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Message.chatId)
}

// string fromUserId = 2;
inline void Message::clear_fromuserid() {
  fromuserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::fromuserid() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.fromUserId)
  return fromuserid_.GetNoArena();
}
inline void Message::set_fromuserid(const ::std::string& value) {
  
  fromuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.fromUserId)
}
#if LANG_CXX11
inline void Message::set_fromuserid(::std::string&& value) {
  
  fromuserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Message.fromUserId)
}
#endif
inline void Message::set_fromuserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fromuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Message.fromUserId)
}
inline void Message::set_fromuserid(const char* value, size_t size) {
  
  fromuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Message.fromUserId)
}
inline ::std::string* Message::mutable_fromuserid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.Message.fromUserId)
  return fromuserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_fromuserid() {
  // @@protoc_insertion_point(field_release:ChatPb.Message.fromUserId)
  
  return fromuserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_fromuserid(::std::string* fromuserid) {
  if (fromuserid != NULL) {
    
  } else {
    
  }
  fromuserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromuserid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Message.fromUserId)
}

// string messageId = 3;
inline void Message::clear_messageid() {
  messageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::messageid() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.messageId)
  return messageid_.GetNoArena();
}
inline void Message::set_messageid(const ::std::string& value) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.messageId)
}
#if LANG_CXX11
inline void Message::set_messageid(::std::string&& value) {
  
  messageid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Message.messageId)
}
#endif
inline void Message::set_messageid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Message.messageId)
}
inline void Message::set_messageid(const char* value, size_t size) {
  
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Message.messageId)
}
inline ::std::string* Message::mutable_messageid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.Message.messageId)
  return messageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_messageid() {
  // @@protoc_insertion_point(field_release:ChatPb.Message.messageId)
  
  return messageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_messageid(::std::string* messageid) {
  if (messageid != NULL) {
    
  } else {
    
  }
  messageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messageid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Message.messageId)
}

// string message = 4;
inline void Message::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::message() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.message)
  return message_.GetNoArena();
}
inline void Message::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.message)
}
#if LANG_CXX11
inline void Message::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Message.message)
}
#endif
inline void Message::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Message.message)
}
inline void Message::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Message.message)
}
inline ::std::string* Message::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.Message.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_message() {
  // @@protoc_insertion_point(field_release:ChatPb.Message.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Message.message)
}

// string localId = 5;
inline void Message::clear_localid() {
  localid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::localid() const {
  // @@protoc_insertion_point(field_get:ChatPb.Message.localId)
  return localid_.GetNoArena();
}
inline void Message::set_localid(const ::std::string& value) {
  
  localid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.Message.localId)
}
#if LANG_CXX11
inline void Message::set_localid(::std::string&& value) {
  
  localid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.Message.localId)
}
#endif
inline void Message::set_localid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  localid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.Message.localId)
}
inline void Message::set_localid(const char* value, size_t size) {
  
  localid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.Message.localId)
}
inline ::std::string* Message::mutable_localid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.Message.localId)
  return localid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_localid() {
  // @@protoc_insertion_point(field_release:ChatPb.Message.localId)
  
  return localid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_localid(::std::string* localid) {
  if (localid != NULL) {
    
  } else {
    
  }
  localid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.Message.localId)
}

// -------------------------------------------------------------------

// MsgAck

// string chatId = 1;
inline void MsgAck::clear_chatid() {
  chatid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgAck::chatid() const {
  // @@protoc_insertion_point(field_get:ChatPb.MsgAck.chatId)
  return chatid_.GetNoArena();
}
inline void MsgAck::set_chatid(const ::std::string& value) {
  
  chatid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.MsgAck.chatId)
}
#if LANG_CXX11
inline void MsgAck::set_chatid(::std::string&& value) {
  
  chatid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.MsgAck.chatId)
}
#endif
inline void MsgAck::set_chatid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chatid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.MsgAck.chatId)
}
inline void MsgAck::set_chatid(const char* value, size_t size) {
  
  chatid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.MsgAck.chatId)
}
inline ::std::string* MsgAck::mutable_chatid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.MsgAck.chatId)
  return chatid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgAck::release_chatid() {
  // @@protoc_insertion_point(field_release:ChatPb.MsgAck.chatId)
  
  return chatid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgAck::set_allocated_chatid(::std::string* chatid) {
  if (chatid != NULL) {
    
  } else {
    
  }
  chatid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chatid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.MsgAck.chatId)
}

// string fromUserId = 2;
inline void MsgAck::clear_fromuserid() {
  fromuserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgAck::fromuserid() const {
  // @@protoc_insertion_point(field_get:ChatPb.MsgAck.fromUserId)
  return fromuserid_.GetNoArena();
}
inline void MsgAck::set_fromuserid(const ::std::string& value) {
  
  fromuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatPb.MsgAck.fromUserId)
}
#if LANG_CXX11
inline void MsgAck::set_fromuserid(::std::string&& value) {
  
  fromuserid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatPb.MsgAck.fromUserId)
}
#endif
inline void MsgAck::set_fromuserid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fromuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatPb.MsgAck.fromUserId)
}
inline void MsgAck::set_fromuserid(const char* value, size_t size) {
  
  fromuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatPb.MsgAck.fromUserId)
}
inline ::std::string* MsgAck::mutable_fromuserid() {
  
  // @@protoc_insertion_point(field_mutable:ChatPb.MsgAck.fromUserId)
  return fromuserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgAck::release_fromuserid() {
  // @@protoc_insertion_point(field_release:ChatPb.MsgAck.fromUserId)
  
  return fromuserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgAck::set_allocated_fromuserid(::std::string* fromuserid) {
  if (fromuserid != NULL) {
    
  } else {
    
  }
  fromuserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromuserid);
  // @@protoc_insertion_point(field_set_allocated:ChatPb.MsgAck.fromUserId)
}

// -------------------------------------------------------------------

// UnreceivedMessage

// int32 count = 1;
inline void UnreceivedMessage::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 UnreceivedMessage::count() const {
  // @@protoc_insertion_point(field_get:ChatPb.UnreceivedMessage.count)
  return count_;
}
inline void UnreceivedMessage::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:ChatPb.UnreceivedMessage.count)
}

// repeated .ChatPb.Message msgs = 2;
inline int UnreceivedMessage::msgs_size() const {
  return msgs_.size();
}
inline void UnreceivedMessage::clear_msgs() {
  msgs_.Clear();
}
inline ::ChatPb::Message* UnreceivedMessage::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:ChatPb.UnreceivedMessage.msgs)
  return msgs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ChatPb::Message >*
UnreceivedMessage::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:ChatPb.UnreceivedMessage.msgs)
  return &msgs_;
}
inline const ::ChatPb::Message& UnreceivedMessage::msgs(int index) const {
  // @@protoc_insertion_point(field_get:ChatPb.UnreceivedMessage.msgs)
  return msgs_.Get(index);
}
inline ::ChatPb::Message* UnreceivedMessage::add_msgs() {
  // @@protoc_insertion_point(field_add:ChatPb.UnreceivedMessage.msgs)
  return msgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ChatPb::Message >&
UnreceivedMessage::msgs() const {
  // @@protoc_insertion_point(field_list:ChatPb.UnreceivedMessage.msgs)
  return msgs_;
}

// -------------------------------------------------------------------

// openReceivedMessageREQ

// bool on = 1;
inline void openReceivedMessageREQ::clear_on() {
  on_ = false;
}
inline bool openReceivedMessageREQ::on() const {
  // @@protoc_insertion_point(field_get:ChatPb.openReceivedMessageREQ.on)
  return on_;
}
inline void openReceivedMessageREQ::set_on(bool value) {
  
  on_ = value;
  // @@protoc_insertion_point(field_set:ChatPb.openReceivedMessageREQ.on)
}

// -------------------------------------------------------------------

// UnreceivedMessageRES

// repeated .ChatPb.UnreceivedMessage unreceivedMessages = 1;
inline int UnreceivedMessageRES::unreceivedmessages_size() const {
  return unreceivedmessages_.size();
}
inline void UnreceivedMessageRES::clear_unreceivedmessages() {
  unreceivedmessages_.Clear();
}
inline ::ChatPb::UnreceivedMessage* UnreceivedMessageRES::mutable_unreceivedmessages(int index) {
  // @@protoc_insertion_point(field_mutable:ChatPb.UnreceivedMessageRES.unreceivedMessages)
  return unreceivedmessages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ChatPb::UnreceivedMessage >*
UnreceivedMessageRES::mutable_unreceivedmessages() {
  // @@protoc_insertion_point(field_mutable_list:ChatPb.UnreceivedMessageRES.unreceivedMessages)
  return &unreceivedmessages_;
}
inline const ::ChatPb::UnreceivedMessage& UnreceivedMessageRES::unreceivedmessages(int index) const {
  // @@protoc_insertion_point(field_get:ChatPb.UnreceivedMessageRES.unreceivedMessages)
  return unreceivedmessages_.Get(index);
}
inline ::ChatPb::UnreceivedMessage* UnreceivedMessageRES::add_unreceivedmessages() {
  // @@protoc_insertion_point(field_add:ChatPb.UnreceivedMessageRES.unreceivedMessages)
  return unreceivedmessages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ChatPb::UnreceivedMessage >&
UnreceivedMessageRES::unreceivedmessages() const {
  // @@protoc_insertion_point(field_list:ChatPb.UnreceivedMessageRES.unreceivedMessages)
  return unreceivedmessages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChatPb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chat_2emessage_2eproto
